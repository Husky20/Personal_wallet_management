<?php

namespace Container835hLc0;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getParseFileHandlerService extends phpDocumentor_KernelProdContainer
{
    /*
     * Gets the private 'phpDocumentor\Guides\RestructuredText\Handlers\ParseFileHandler' shared autowired service.
     *
     * @return \phpDocumentor\Guides\RestructuredText\Handlers\ParseFileHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Guides/RestructuredText/Handlers/ParseFileHandler.php';
        include_once \dirname(__DIR__, 6).'/doctrine/event-manager/lib/Doctrine/Common/EventManager.php';
        include_once \dirname(__DIR__, 4).'/src/Guides/Metas.php';
        include_once \dirname(__DIR__, 4).'/src/Guides/Documents.php';

        return $container->privates['phpDocumentor\\Guides\\RestructuredText\\Handlers\\ParseFileHandler'] = new \phpDocumentor\Guides\RestructuredText\Handlers\ParseFileHandler(($container->privates['phpDocumentor\\Guides\\Metas'] ?? ($container->privates['phpDocumentor\\Guides\\Metas'] = new \phpDocumentor\Guides\Metas())), ($container->privates['phpDocumentor\\Guides\\Documents'] ?? ($container->privates['phpDocumentor\\Guides\\Documents'] = new \phpDocumentor\Guides\Documents())), ($container->privates['phpDocumentor\\Guides\\Renderer'] ?? $container->load('getRendererService')), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')), new \Doctrine\Common\EventManager(), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\CodeBlock'] ?? ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\CodeBlock'] = new \phpDocumentor\Guides\RestructuredText\Directives\CodeBlock()));
            yield 1 => ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Dummy'] ?? ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Dummy'] = new \phpDocumentor\Guides\RestructuredText\Directives\Dummy()));
            yield 2 => ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Raw'] ?? ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Raw'] = new \phpDocumentor\Guides\RestructuredText\Directives\Raw()));
            yield 3 => ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Replace'] ?? ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Replace'] = new \phpDocumentor\Guides\RestructuredText\Directives\Replace()));
            yield 4 => ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Toctree'] ?? ($container->privates['phpDocumentor\\Guides\\RestructuredText\\Directives\\Toctree'] = new \phpDocumentor\Guides\RestructuredText\Directives\Toctree()));
        }, 5), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['phpDocumentor\\Guides\\References\\ClassReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\ClassReference'] = new \phpDocumentor\Guides\References\ClassReference()));
            yield 1 => ($container->privates['phpDocumentor\\Guides\\References\\DeciderReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\DeciderReference'] = new \phpDocumentor\Guides\References\DeciderReference()));
            yield 2 => ($container->privates['phpDocumentor\\Guides\\References\\Doc'] ?? ($container->privates['phpDocumentor\\Guides\\References\\Doc'] = new \phpDocumentor\Guides\References\Doc()));
            yield 3 => ($container->privates['phpDocumentor\\Guides\\References\\LeaderReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\LeaderReference'] = new \phpDocumentor\Guides\References\LeaderReference()));
            yield 4 => ($container->privates['phpDocumentor\\Guides\\References\\MergerReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\MergerReference'] = new \phpDocumentor\Guides\References\MergerReference()));
            yield 5 => ($container->privates['phpDocumentor\\Guides\\References\\MethodReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\MethodReference'] = new \phpDocumentor\Guides\References\MethodReference()));
            yield 6 => ($container->privates['phpDocumentor\\Guides\\References\\NamespaceReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\NamespaceReference'] = new \phpDocumentor\Guides\References\NamespaceReference()));
            yield 7 => ($container->privates['phpDocumentor\\Guides\\References\\PhpClassReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\PhpClassReference'] = new \phpDocumentor\Guides\References\PhpClassReference()));
            yield 8 => ($container->privates['phpDocumentor\\Guides\\References\\PhpFunctionReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\PhpFunctionReference'] = new \phpDocumentor\Guides\References\PhpFunctionReference()));
            yield 9 => ($container->privates['phpDocumentor\\Guides\\References\\PhpMethodReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\PhpMethodReference'] = new \phpDocumentor\Guides\References\PhpMethodReference()));
            yield 10 => ($container->privates['phpDocumentor\\Guides\\References\\TermReference'] ?? ($container->privates['phpDocumentor\\Guides\\References\\TermReference'] = new \phpDocumentor\Guides\References\TermReference()));
        }, 11));
    }
}
